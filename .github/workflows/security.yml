name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 1' # Weekly security scan on Mondays at 2 AM

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven

    - name: Run OWASP Dependency Check
      run: |
        ./mvnw org.owasp:dependency-check-maven:check \
          -DfailBuildOnCVSS=7 \
          -DautoUpdate=true \
          -Dformats=HTML,JSON,XML

    - name: Upload OWASP Report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: owasp-dependency-check-report
        path: |
          target/dependency-check-report.html
          target/dependency-check-report.json
          target/dependency-check-report.xml

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: dependency-scan

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker image
      run: docker build -t eagle-bank-api:latest .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'eagle-bank-api:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Grype vulnerability scanner
      uses: anchore/scan-action@v3
      id: grype-scan
      with:
        image: "eagle-bank-api:latest"
        fail-build: false
        severity-cutoff: high

    - name: Upload Grype scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: grype-scan-results
        path: ${{ steps.grype-scan.outputs.sarif }}

  code-scan:
    name: Static Code Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: java

    - name: Build application
      run: ./mvnw clean compile -DskipTests

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

    - name: Run SpotBugs
      run: |
        ./mvnw com.github.spotbugs:spotbugs-maven-plugin:check \
          -Dspotbugs.effort=Max \
          -Dspotbugs.threshold=Low

    - name: Upload SpotBugs results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: spotbugs-report
        path: target/spotbugsXml.xml

  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

    - name: Run GitLeaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  compliance-scan:
    name: Compliance and License Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven

    - name: License Check
      run: |
        ./mvnw license:check \
          -Dlicense.failIfMissing=true \
          -Dlicense.failIfUnknown=true

    - name: Generate License Report
      run: |
        ./mvnw license:aggregate-third-party-report

    - name: Upload License Report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: license-report
        path: target/site/aggregate-third-party-report.html

  notify-security:
    name: Security Notification
    runs-on: ubuntu-latest
    needs: [dependency-scan, container-scan, code-scan, secret-scan, compliance-scan]
    if: failure() && github.ref == 'refs/heads/main'

    steps:
    - name: Notify security team
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#security-alerts'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_SECURITY }}
        text: |
          ðŸš¨ Security scan failed for Eagle Bank API
          Repository: ${{ github.repository }}
          Commit: ${{ github.sha }}
          Please review the security scan results immediately.
